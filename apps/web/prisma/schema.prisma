generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions", "relationJoins"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String           @id @default(cuid())
  email               String           @unique
  name                String?
  image               String?
  hashedPassword      String?
  role                String           @default("USER")
  teamName            String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  loginAttempts       Int              @default(0)
  lockedUntil         DateTime?
  sessionId           String?
  lastLoginAt         DateTime?
  auditLogs           AuditLog[]
  chatMessages        ChatMessage[]
  commissionedLeagues LeagueSettings[]
  notifications       Notification[]
  teams               Team[]
  preferences         UserPreferences?

  @@map("users")
}

model UserPreferences {
  id                   String  @id @default(cuid())
  userId               String  @unique
  theme                String  @default("system")
  notifications        String?
  emailNotifications   Boolean @default(true)
  emailUpdates         Boolean @default(true)
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model League {
  id                    String                      @id @default(cuid())
  name                  String
  description           String?
  isActive              Boolean                     @default(true)
  playoffs              Boolean                     @default(false)
  currentWeek           Int                         @default(1)
  maxTeams              Int                         @default(12)
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  auditLogs             AuditLog[]
  draft                 Draft?
  settings              LeagueSettings?
  matchups              Matchup[]
  teams                 Team[]
  waiverSettings        WaiverSettings?
  waiverRecommendations WaiverWireRecommendations[]
  analytics             LeagueAnalytics[]

  @@map("leagues")
}

model Team {
  id                    String                  @id @default(cuid())
  name                  String
  ownerId               String
  leagueId              String
  wins                  Int                     @default(0)
  losses                Int                     @default(0)
  ties                  Int                     @default(0)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  draftOrder            DraftOrder[]
  draftPicks            DraftPick[]
  lineupOptimizations   LineupOptimization[]
  awayMatchupAnalyses   MatchupAnalysis[]       @relation("MatchupAnalysisAway")
  homeMatchupAnalyses   MatchupAnalysis[]       @relation("MatchupAnalysisHome")
  matchupScores         MatchupLiveScore[]
  awayMatchups          Matchup[]               @relation("AwayTeam")
  homeMatchups          Matchup[]               @relation("HomeTeam")
  roster                RosterPlayer[]
  waiverPriority        TeamWaiverPriority[]
  league                League                  @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  owner                 User                    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  proposedTradeAnalyses TradeAnalysis[]         @relation("TradeAnalysisProposing")
  receivedTradeAnalyses TradeAnalysis[]         @relation("TradeAnalysisReceiving")
  proposedTrades        TradeProposal[]         @relation("ProposingTeam")
  receivedTrades        TradeProposal[]         @relation("ReceivingTeam")
  waiverClaims          WaiverClaim[]
  weeklyStats           WeeklyTeamStats[]
  scheduleStrength      StrengthOfSchedule[]

  @@unique([ownerId, leagueId])
  @@index([leagueId])
  @@index([ownerId])
  @@index([leagueId, wins, losses])
  @@index([wins, losses, ties])
  @@map("teams")
}

model Player {
  id                    String                      @id @default(cuid())
  name                  String
  position              String
  nflTeam               String
  isFantasyRelevant     Boolean                     @default(true)
  adp                   Float?
  rank                  Int?
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  aiInsights            AIPlayerInsights[]
  draftPicks            DraftPick[]
  liveUpdates           LivePlayerUpdate[]
  injuryReports         PlayerInjuryReport[]
  news                  PlayerNews[]
  projections           PlayerProjection[]
  stats                 PlayerStats[]
  roster                RosterPlayer[]
  seasonProjections     SeasonProjections[]
  droppedFromWaivers    WaiverClaim[]               @relation("DroppedFromWaivers")
  waiverClaims          WaiverClaim[]               @relation("WaiverClaims")
  waiverRecommendations WaiverWireRecommendations[]
  weeklyAnalytics       PlayerWeeklyAnalytics[]
  waiverAnalytics       WaiverWireAnalytics[]
  consistency           PlayerConsistency[]

  @@index([position, isFantasyRelevant])
  @@index([nflTeam, position])
  @@index([name])
  @@index([rank, position])
  @@index([adp, position])
  @@index([isFantasyRelevant, position, rank])
  @@map("players")
}

model PlayerStats {
  id            String @id @default(cuid())
  playerId      String
  week          Int
  season        Int    @default(2025)
  fantasyPoints Float  @default(0)
  stats         String
  player        Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, week, season])
  @@index([week, season])
  @@index([fantasyPoints])
  @@index([playerId, week])
  @@index([season, week, fantasyPoints])
  @@index([playerId, season])
  @@index([week, season, fantasyPoints])
  @@map("player_stats")
}

model PlayerProjection {
  id              String @id @default(cuid())
  playerId        String
  week            Int
  season          Int    @default(2025)
  projectedPoints Float
  confidence      Float  @default(0.5)
  player          Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, week, season])
  @@index([playerId, week, season])
  @@index([week, season, projectedPoints])
  @@index([season, week])
  @@index([playerId, season])
  @@map("player_projections")
}

model PlayerNews {
  id          String   @id @default(cuid())
  playerId    String
  title       String
  content     String
  source      String
  severity    String   @default("LOW")
  publishedAt DateTime @default(now())
  player      Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("player_news")
}

model RosterPlayer {
  id         String  @id @default(cuid())
  teamId     String
  playerId   String
  position   String  @default("BENCH")
  rosterSlot String?
  isStarter  Boolean @default(false)
  player     Player  @relation(fields: [playerId], references: [id], onDelete: Cascade)
  team       Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, playerId])
  @@index([teamId, isStarter])
  @@index([teamId, position])
  @@index([playerId])
  @@index([isStarter, position])
  @@map("roster_players")
}

model Matchup {
  id         String             @id @default(cuid())
  week       Int
  season     Int                @default(2025)
  homeTeamId String
  awayTeamId String
  homeScore  Float              @default(0)
  awayScore  Float              @default(0)
  isComplete Boolean            @default(false)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  leagueId   String
  liveScores MatchupLiveScore[]
  awayTeam   Team               @relation("AwayTeam", fields: [awayTeamId], references: [id], onDelete: Cascade)
  homeTeam   Team               @relation("HomeTeam", fields: [homeTeamId], references: [id], onDelete: Cascade)
  league     League             @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@unique([week, season, homeTeamId, awayTeamId])
  @@index([week, season, leagueId])
  @@index([isComplete, week])
  @@index([leagueId, week])
  @@map("matchups")
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  leagueId  String
  content   String
  type      String   @default("TEXT")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model TradeProposal {
  id                 String         @id @default(cuid())
  proposingTeamId    String
  receivingTeamId    String
  givingPlayerIds    String
  receivingPlayerIds String
  message            String?
  status             String         @default("PENDING")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  commissionerNotes  String?
  expiresAt          DateTime?
  reviewedAt         DateTime?
  reviewedBy         String?
  tradeHistory       TradeHistory[]
  proposingTeam      Team           @relation("ProposingTeam", fields: [proposingTeamId], references: [id], onDelete: Cascade)
  receivingTeam      Team           @relation("ReceivingTeam", fields: [receivingTeamId], references: [id], onDelete: Cascade)

  @@map("trade_proposals")
}

model TradeHistory {
  id        String        @id @default(cuid())
  tradeId   String
  action    String
  userId    String
  notes     String?
  createdAt DateTime      @default(now())
  trade     TradeProposal @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@map("trade_history")
}

model Draft {
  id              String       @id @default(cuid())
  leagueId        String       @unique
  status          String       @default("SCHEDULED")
  type            String       @default("SNAKE")
  startTime       DateTime?
  endTime         DateTime?
  currentRound    Int          @default(1)
  currentPick     Int          @default(1)
  currentTeamId   String?
  timePerPick     Int          @default(60)
  pickStartTime   DateTime?
  autoPickEnabled Boolean      @default(true)
  settings        String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  order           DraftOrder[]
  picks           DraftPick[]
  league          League       @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@map("drafts")
}

model DraftPick {
  id         String   @id @default(cuid())
  draftId    String
  teamId     String
  playerId   String
  round      Int
  pick       Int
  pickTime   DateTime @default(now())
  isAutoPick Boolean  @default(false)
  pickValue  Float?
  draft      Draft    @relation(fields: [draftId], references: [id], onDelete: Cascade)
  player     Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([draftId, round, pick])
  @@map("draft_picks")
}

model DraftOrder {
  id       String @id @default(cuid())
  draftId  String
  teamId   String
  position Int
  round    Int
  draft    Draft  @relation(fields: [draftId], references: [id], onDelete: Cascade)
  team     Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([draftId, teamId, round])
  @@map("draft_order")
}

model WaiverClaim {
  id              String    @id @default(cuid())
  teamId          String
  playerId        String
  droppedPlayerId String?
  priority        Int
  week            Int
  season          Int       @default(2025)
  status          String    @default("PENDING")
  processedAt     DateTime?
  failureReason   String?
  amount          Float?
  createdAt       DateTime  @default(now())
  droppedPlayer   Player?   @relation("DroppedFromWaivers", fields: [droppedPlayerId], references: [id])
  player          Player    @relation("WaiverClaims", fields: [playerId], references: [id], onDelete: Cascade)
  team            Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("waiver_claims")
}

model WaiverSettings {
  id               String @id @default(cuid())
  leagueId         String @unique
  type             String @default("ROLLING")
  processDay       String @default("WEDNESDAY")
  processTime      String @default("03:00")
  claimPeriodHours Int    @default(48)
  freeAgentBudget  Float  @default(1000)
  minimumBid       Float  @default(1)
  league           League @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@map("waiver_settings")
}

model TeamWaiverPriority {
  id       String @id @default(cuid())
  teamId   String
  week     Int
  season   Int    @default(2025)
  priority Int
  budget   Float  @default(1000)
  team     Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, week, season])
  @@map("team_waiver_priority")
}

model LeagueSettings {
  id                String  @id @default(cuid())
  leagueId          String  @unique
  commissionerId    String
  rosterPositions   String
  scoringSettings   String
  playoffSettings   String
  tradeSettings     String
  waiverSettings    String
  draftSettings     String
  seasonSettings    String
  ruleModifications String?
  isLocked          Boolean @default(false)
  commissioner      User    @relation(fields: [commissionerId], references: [id], onDelete: Cascade)
  league            League  @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@map("league_settings")
}

model LiveGame {
  id            String             @id @default(cuid())
  nflGameId     String             @unique
  homeTeam      String
  awayTeam      String
  week          Int
  season        Int                @default(2025)
  gameTime      DateTime
  status        String             @default("SCHEDULED")
  quarter       Int?
  timeRemaining String?
  homeScore     Int                @default(0)
  awayScore     Int                @default(0)
  lastUpdated   DateTime           @default(now())
  playerUpdates LivePlayerUpdate[]

  @@index([week, season, status])
  @@index([gameTime, status])
  @@index([nflGameId])
  @@index([week, season, gameTime])
  @@map("live_games")
}

model LivePlayerUpdate {
  id            String   @id @default(cuid())
  gameId        String
  playerId      String
  statType      String
  statValue     Float
  timestamp     DateTime @default(now())
  quarter       Int?
  timeInQuarter String?
  game          LiveGame @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player        Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([playerId, timestamp])
  @@index([gameId, timestamp])
  @@index([timestamp])
  @@index([playerId, statType])
  @@index([gameId, quarter])
  @@map("live_player_updates")
}

model MatchupLiveScore {
  id                String   @id @default(cuid())
  matchupId         String
  teamId            String
  currentScore      Float    @default(0)
  projectedScore    Float    @default(0)
  activePlayerCount Int      @default(0)
  lastUpdated       DateTime @default(now())
  matchup           Matchup  @relation(fields: [matchupId], references: [id], onDelete: Cascade)
  team              Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([matchupId, teamId])
  @@map("matchup_live_scores")
}

model PlayerInjuryReport {
  id          String   @id @default(cuid())
  playerId    String
  status      String
  injury      String?
  description String?
  week        Int
  season      Int      @default(2025)
  updatedAt   DateTime @default(now())
  player      Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, week, season])
  @@map("player_injury_reports")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  data      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AuditLog {
  id          String   @id @default(cuid())
  leagueId    String?
  userId      String?
  action      String
  description String
  metadata    String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  league      League?  @relation(fields: [leagueId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model WeeklyGameData {
  id           String   @id @default(cuid())
  week         Int
  season       Int      @default(2025)
  nflTeam      String
  opponent     String
  homeAway     String
  gameScript   Float?
  weather      String?
  temperature  Int?
  windSpeed    Int?
  vegas_total  Float?
  vegas_spread Float?
  createdAt    DateTime @default(now())

  @@unique([week, season, nflTeam])
  @@map("weekly_game_data")
}

model AIPlayerInsights {
  id                     String   @id @default(cuid())
  playerId               String
  week                   Int
  season                 Int      @default(2025)
  projectedPoints        Float
  projectionConfidence   Float    @default(0.5)
  floorProjection        Float
  ceilingProjection      Float
  injuryRisk             Float    @default(0.0)
  bustvRisk              Float    @default(0.0)
  breakoutPotential      Float    @default(0.0)
  targetShare            Float?
  snapShareProjected     Float?
  redZoneOpportunity     Float?
  gameScript             Float?
  startSitRecommendation String?
  confidenceLevel        String?
  reasoning              String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  player                 Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, week, season])
  @@map("ai_player_insights")
}

model LineupOptimization {
  id             String   @id @default(cuid())
  teamId         String
  week           Int
  season         Int      @default(2025)
  strategy       String
  reasoning      String?
  lineup         String
  benchPlayers   String
  projectedScore Float
  floorScore     Float
  ceilingScore   Float
  winProbability Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  team           Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, week, season])
  @@map("lineup_optimizations")
}

model WaiverWireRecommendations {
  id                 String   @id @default(cuid())
  leagueId           String
  playerId           String
  week               Int
  season             Int      @default(2025)
  priority           Int
  recommendationType String
  reasoning          String
  projectedValue     Float
  rosterPercentage   Float?
  addDropConfidence  Float    @default(0.5)
  riskLevel          String
  upside             String
  createdAt          DateTime @default(now())
  league             League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  player             Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([leagueId, playerId, week, season])
  @@map("waiver_wire_recommendations")
}

model TradeAnalysis {
  id                  String   @id @default(cuid())
  proposingTeamId     String
  receivingTeamId     String
  week                Int
  season              Int      @default(2025)
  tradeDetails        String
  fairnessScore       Float
  winWinProbability   Float
  proposingTeamImpact String
  receivingTeamImpact String
  recommendation      String
  reasoning           String
  counterSuggestion   String?
  confidenceLevel     Float    @default(0.5)
  createdAt           DateTime @default(now())
  proposingTeam       Team     @relation("TradeAnalysisProposing", fields: [proposingTeamId], references: [id], onDelete: Cascade)
  receivingTeam       Team     @relation("TradeAnalysisReceiving", fields: [receivingTeamId], references: [id], onDelete: Cascade)

  @@map("trade_analyses")
}

model MatchupAnalysis {
  id                 String   @id @default(cuid())
  week               Int
  season             Int      @default(2025)
  homeTeamId         String
  awayTeamId         String
  projectedHomeScore Float
  projectedAwayScore Float
  winProbability     Float
  keyMatchups        String
  weatherImpact      String?
  injuryImpact       String?
  homeTeamStrategy   String
  awayTeamStrategy   String
  analysisConfidence Float    @default(0.5)
  notes              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  awayTeam           Team     @relation("MatchupAnalysisAway", fields: [awayTeamId], references: [id], onDelete: Cascade)
  homeTeam           Team     @relation("MatchupAnalysisHome", fields: [homeTeamId], references: [id], onDelete: Cascade)

  @@unique([week, season, homeTeamId, awayTeamId])
  @@map("matchup_analyses")
}

model SeasonProjections {
  id              String   @id @default(cuid())
  playerId        String
  season          Int      @default(2025)
  projectedGames  Int
  projectedPoints Float
  preseasonRank   Int?
  currentRank     Int?
  projectedRank   Int?
  trendDirection  String
  trendStrength   Float
  breakoutOdds    Float    @default(0.5)
  regressionRisk  Float    @default(0.5)
  injuryRisk      Float    @default(0.0)
  durabilityScore Float    @default(0.5)
  adpVsProjection Float?
  valueGrade      String?
  lastUpdated     DateTime @updatedAt
  createdAt       DateTime @default(now())
  player          Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, season])
  @@map("season_projections")
}

model PlayerWeeklyAnalytics {
  id                String   @id @default(cuid())
  playerId          String
  player            Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  week              Int
  season            Int
  fantasyPoints     Float
  projectedPoints   Float
  target            Int      @default(0)
  receptions        Int      @default(0)
  rushingYards      Int      @default(0)
  passingYards      Int      @default(0)
  touchdowns        Int      @default(0)
  snapPercentage    Float    @default(0)
  redZoneTargets    Int      @default(0)
  goalLineCarries   Int      @default(0)
  ownership         Float    @default(0)
  consistencyScore  Float    @default(0)
  volumeScore       Float    @default(0)
  efficiencyScore   Float    @default(0)
  trendScore        Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([playerId, week, season])
  @@index([playerId])
  @@index([week, season])
  @@map("player_weekly_analytics")
}

model WeeklyTeamStats {
  id              String   @id @default(cuid())
  teamId          String
  team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  week            Int
  season          Int
  totalPoints     Float
  projectedPoints Float
  benchPoints     Float    @default(0)
  optimalPoints   Float    @default(0)
  rank            Int      @default(0)
  movingAverage   Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([teamId, week, season])
  @@index([teamId])
  @@index([week, season])
  @@map("weekly_team_stats")
}

model MatchupAnalytics {
  id                  String   @id @default(cuid())
  matchupId           String
  week                Int
  season              Int
  homeTeamProjection  Float
  awayTeamProjection  Float
  winProbability      Float
  volatility          Float
  confidenceLevel     Float
  keyPlayers          String
  weatherImpact       Float    @default(0)
  injuryRisk          Float    @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([matchupId, week, season])
  @@index([matchupId])
  @@index([week, season])
  @@map("matchup_analytics")
}

model WaiverWireAnalytics {
  id                  String   @id @default(cuid())
  playerId            String
  player              Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  week                Int
  season              Int
  addPercentage       Float    @default(0)
  dropPercentage      Float    @default(0)
  faabSpent           Int      @default(0)
  emergingPlayer      Boolean  @default(false)
  breakoutCandidate   Boolean  @default(false)
  sleeper             Boolean  @default(false)
  injuryReplacement   Boolean  @default(false)
  streamingOption     Boolean  @default(false)
  priorityLevel       Int      @default(1)
  reasonsToAdd        String
  expectedOwnership   Float    @default(0)
  upcomingSchedule    String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([playerId, week, season])
  @@index([playerId])
  @@index([week, season])
  @@map("waiver_wire_analytics")
}

model PlayerConsistency {
  id                String   @id @default(cuid())
  playerId          String
  player            Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  season            Int
  weekCount         Int      @default(0)
  totalPoints       Float    @default(0)
  averagePoints     Float    @default(0)
  standardDeviation Float    @default(0)
  coefficient       Float    @default(0)
  floorScore        Float    @default(0)
  ceilingScore      Float    @default(0)
  busts             Int      @default(0)
  booms             Int      @default(0)
  reliability       Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([playerId, season])
  @@index([playerId])
  @@index([season])
  @@map("player_consistency")
}

model StrengthOfSchedule {
  id              String   @id @default(cuid())
  teamId          String
  team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  week            Int
  season          Int
  remainingSOS    Float    @default(0)
  playedSOS       Float    @default(0)
  positionSOS     String
  fantasyPlayoffs Float    @default(0)
  easyMatchups    Int      @default(0)
  hardMatchups    Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([teamId, week, season])
  @@index([teamId])
  @@index([week, season])
  @@map("strength_of_schedule")
}

model LeagueAnalytics {
  id                  String   @id @default(cuid())
  leagueId            String
  league              League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  week                Int
  season              Int
  averageScore        Float    @default(0)
  highScore           Float    @default(0)
  lowScore            Float    @default(0)
  scoringVariance     Float    @default(0)
  competitiveBalance  Float    @default(0)
  parity              Float    @default(0)
  playoffRace         String
  strengthOfSchedule  String
  powerRankings       String
  trendsAnalysis      String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([leagueId, week, season])
  @@index([leagueId])
  @@index([week, season])
  @@map("league_analytics")
}

model RealTimeEvents {
  id         String   @id @default(cuid())
  eventType  String
  entityType String
  entityId   String
  data       String
  impact     Float    @default(0)
  confidence Float    @default(1.0)
  processed  Boolean  @default(false)
  timestamp  DateTime @default(now())

  @@index([eventType])
  @@index([timestamp])
  @@index([processed])
  @@index([entityType, entityId])
  @@map("real_time_events")
}

enum SecurityEventType {
  login_success
  login_failure
  login_blocked
  logout
  password_change
  password_reset_request
  password_reset_complete
  email_change
  mfa_enabled
  mfa_disabled
  mfa_verified
  mfa_failed
  session_created
  session_expired
  session_revoked
  account_locked
  account_unlocked
  suspicious_activity
  rate_limit_exceeded
  unauthorized_access
  REGISTRATION_SUCCESS
  REGISTRATION_FAILED
  SECURITY_SCAN
  THREAT_DETECTED
  EMERGENCY_LOCKDOWN
}
