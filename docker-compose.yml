# Quantum's Complete Development Environment
version: '3.8'

services:
  # PostgreSQL Database with High Availability
  postgres:
    image: postgres:15-alpine
    container_name: astralfield-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: astralfield
      POSTGRES_USER: astralfield
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U astralfield -d astralfield"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - astralfield-network

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: astralfield-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-secure_redis_password} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - astralfield-network

  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: astralfield-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 8080
      DATABASE_URL: postgresql://astralfield:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/astralfield
      REDIS_URL: redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_here}
      SENTRY_DSN: ${SENTRY_DSN}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - api_logs:/app/logs
    networks:
      - astralfield-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: astralfield-web
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your_nextauth_secret}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      DATABASE_URL: postgresql://astralfield:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/astralfield
      API_URL: http://api:8080
    ports:
      - "3000:3000"
    depends_on:
      - api
      - postgres
    networks:
      - astralfield-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: astralfield-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
      - api
    networks:
      - astralfield-network

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: astralfield-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./infrastructure/monitoring/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    networks:
      - astralfield-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: astralfield-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - astralfield-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  api_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  astralfield-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16