name: Deploy to Production

on:
  push:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'
      skip_tests:
        description: 'Skip integration tests'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  pre-deployment-checks:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.checks.outputs.should_deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate deployment conditions
        id: checks
        run: |
          # Check if this is a hotfix or regular deployment
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event_name }}" == "release" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Check production readiness
        run: |
          # Verify all required secrets are available
          if [ -z "${{ secrets.PROD_DATABASE_URL }}" ]; then
            echo "‚ùå Production database URL not configured"
            exit 1
          fi
          
          if [ -z "${{ secrets.PROD_REDIS_URL }}" ]; then
            echo "‚ùå Production Redis URL not configured"
            exit 1
          fi
          
          echo "‚úÖ Production secrets validation passed"

  build-production:
    name: Build Production Image
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha,prefix=prod-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push production image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            NODE_ENV=production
            NEXT_PUBLIC_APP_ENV=production

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, build-production]
    environment: 
      name: production
      url: https://astralfield.com
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: production

      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v1
        with:
          manifests: |
            k8s/deployment.yaml
            k8s/service.yaml
            k8s/ingress.yaml
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          kubectl-version: 'latest'
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}

      - name: Run database migrations
        run: |
          kubectl exec -n astral-field deployment/astral-field-app -- npm run db:migrate

      - name: Wait for deployment rollout
        run: |
          kubectl rollout status deployment/astral-field-app -n astral-field --timeout=600s

      - name: Production health check
        run: |
          # Wait for services to be ready
          sleep 60
          
          # Check main application health
          curl -f https://astralfield.com/api/health || exit 1
          
          # Check database connectivity
          curl -f https://astralfield.com/api/system/health/database || exit 1
          
          # Check Redis connectivity  
          curl -f https://astralfield.com/api/system/health/redis || exit 1

      - name: Run production smoke tests
        if: github.event.inputs.skip_tests != 'true'
        run: |
          # Run critical path tests against production
          npm ci
          npm run test:smoke -- --baseUrl=https://astralfield.com

      - name: Update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: production
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Notify deployment success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: |
            üéâ Production deployment completed successfully!
            
            **Environment:** Production
            **Version:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **URL:** https://astralfield.com
            
            The new version is now live! üöÄ
          SLACK_COLOR: good

      - name: Notify deployment failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: |
            üö® PRODUCTION DEPLOYMENT FAILED! üö®
            
            **Environment:** Production
            **Version:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            
            Immediate attention required!
          SLACK_COLOR: danger

  rollback-on-failure:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure() && needs.deploy-production.result == 'failure'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback deployment
        run: |
          # Get previous successful deployment
          PREVIOUS_DEPLOYMENT=$(kubectl rollout history deployment/astral-field-app -n astral-field | tail -n 2 | head -n 1 | awk '{print $1}')
          
          # Rollback to previous version
          kubectl rollout undo deployment/astral-field-app -n astral-field --to-revision=$PREVIOUS_DEPLOYMENT
          
          # Wait for rollback to complete
          kubectl rollout status deployment/astral-field-app -n astral-field --timeout=300s

      - name: Verify rollback
        run: |
          sleep 30
          curl -f https://astralfield.com/api/health || exit 1

      - name: Notify rollback
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: |
            ‚ö° Emergency rollback completed
            
            The production deployment failed and has been automatically rolled back to the previous stable version.
            
            **Failed Version:** ${{ github.sha }}
            **Current Status:** Rolled back to previous stable version
            
            Please investigate the deployment failure.
          SLACK_COLOR: warning