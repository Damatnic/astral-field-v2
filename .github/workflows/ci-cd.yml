name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  DEPLOYMENT_TIMEOUT: 1800 # 30 minutes

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Generate Prisma Client
      run: npx prisma generate
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Run TypeScript check
      run: npx tsc --noEmit
    
    - name: Run ESLint
      run: npm run lint
      continue-on-error: true
    
    - name: Run tests
      run: npm test
      continue-on-error: true

  # Build and Test
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Generate Prisma Client
      run: npx prisma generate
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Build application
      run: npm run build
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
        AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
        AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NODE_ENV: production
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .next
          public
        retention-days: 1

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: npm audit --audit-level high
      continue-on-error: true
    
    - name: Check for secrets
      run: |
        if grep -r "sk_live\|pk_live\|rk_live" --exclude-dir=node_modules . ; then
          echo "Potential secrets found!"
          exit 1
        fi
        echo "No obvious secrets detected"

  # Deploy to Vercel
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Vercel CLI
      run: npm install -g vercel@latest
      
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Deploy Project Artifacts to Vercel
      id: deploy
      run: |
        DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
        echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV
        
    - name: Wait for deployment to be ready
      run: |
        echo "Waiting for deployment to be ready..."
        for i in {1..30}; do
          if curl -f "${{ env.DEPLOYMENT_URL }}/api/health" > /dev/null 2>&1; then
            echo "Deployment is ready!"
            break
          fi
          echo "Attempt $i/30 - waiting 30s..."
          sleep 30
        done
        
    - name: Run deployment health checks
      run: |
        echo "Running comprehensive health checks..."
        
        # Check main endpoints
        endpoints=(
          "/api/health"
          "/api/espn/scoreboard"
          "/api/auth/providers"
          "/login"
        )
        
        failed_checks=0
        for endpoint in "${endpoints[@]}"; do
          echo "Checking $endpoint..."
          if curl -f "${{ env.DEPLOYMENT_URL }}$endpoint" > /dev/null 2>&1; then
            echo "‚úÖ $endpoint is healthy"
          else
            echo "‚ùå $endpoint failed"
            ((failed_checks++))
          fi
        done
        
        if [ $failed_checks -gt 1 ]; then
          echo "Too many health checks failed ($failed_checks)"
          exit 1
        fi
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        
        # Test ESPN integration
        response=$(curl -s "${{ env.DEPLOYMENT_URL }}/api/espn/scoreboard")
        if echo "$response" | grep -q "success\|data\|events"; then
          echo "‚úÖ ESPN integration working"
        else
          echo "‚ùå ESPN integration failed"
          exit 1
        fi
        
        # Test authentication endpoints
        auth_response=$(curl -s "${{ env.DEPLOYMENT_URL }}/api/auth/providers")
        if [ $? -eq 0 ]; then
          echo "‚úÖ Auth endpoints accessible"
        else
          echo "‚ùå Auth endpoints failed"
          exit 1
        fi
        
        # Test database health (via health endpoint)
        health_response=$(curl -s "${{ env.DEPLOYMENT_URL }}/api/health")
        if echo "$health_response" | grep -q '"database.*healthy"'; then
          echo "‚úÖ Database connection healthy"
        else
          echo "‚ùå Database connection issues detected"
          echo "Health response: $health_response"
          exit 1
        fi
        
    - name: Update deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful: ${{ env.DEPLOYMENT_URL }}"
        else
          echo "‚ùå Deployment failed"
        fi

  # Post-deployment validation
  validate:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Get deployment URL
      run: |
        DEPLOYMENT_URL=$(vercel inspect --token=${{ secrets.VERCEL_TOKEN }} --json | jq -r '.url')
        echo "DEPLOYMENT_URL=https://$DEPLOYMENT_URL" >> $GITHUB_ENV
        
    - name: Run comprehensive validation
      run: |
        if [ -f "scripts/monitor-deployment.js" ]; then
          node scripts/monitor-deployment.js "${{ env.DEPLOYMENT_URL }}"
        else
          echo "Deployment monitor script not found, running basic validation..."
          curl -f "${{ env.DEPLOYMENT_URL }}/api/health"
        fi
        
    - name: Performance test
      run: |
        echo "Running basic performance test..."
        
        start_time=$(date +%s%N)
        curl -s "${{ env.DEPLOYMENT_URL }}/" > /dev/null
        end_time=$(date +%s%N)
        
        response_time=$(( (end_time - start_time) / 1000000 ))
        echo "Homepage response time: ${response_time}ms"
        
        if [ $response_time -gt 5000 ]; then
          echo "‚ùå Response time too slow: ${response_time}ms"
          exit 1
        else
          echo "‚úÖ Response time acceptable: ${response_time}ms"
        fi
        
    - name: Notify success
      if: success()
      run: |
        echo "üéâ Deployment validation completed successfully!"
        echo "üîó Application URL: ${{ env.DEPLOYMENT_URL }}"
        echo "üè• Health check: ${{ env.DEPLOYMENT_URL }}/api/health"
        echo "üîê Login page: ${{ env.DEPLOYMENT_URL }}/login"

  # Rollback on failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy, validate]
    if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Vercel CLI
      run: npm install -g vercel@latest
      
    - name: Get previous deployment
      run: |
        echo "Getting previous successful deployment..."
        PREV_DEPLOYMENT=$(vercel list --token=${{ secrets.VERCEL_TOKEN }} --json | jq -r '.[1].url // "none"')
        echo "PREV_DEPLOYMENT=$PREV_DEPLOYMENT" >> $GITHUB_ENV
        
    - name: Promote previous deployment
      if: env.PREV_DEPLOYMENT != 'none'
      run: |
        echo "Rolling back to previous deployment: ${{ env.PREV_DEPLOYMENT }}"
        vercel promote ${{ env.PREV_DEPLOYMENT }} --token=${{ secrets.VERCEL_TOKEN }}
        
    - name: Verify rollback
      if: env.PREV_DEPLOYMENT != 'none'
      run: |
        sleep 30
        if curl -f "https://${{ env.PREV_DEPLOYMENT }}/api/health" > /dev/null 2>&1; then
          echo "‚úÖ Rollback successful"
        else
          echo "‚ùå Rollback failed"
          exit 1
        fi
        
    - name: Create issue on rollback
      if: env.PREV_DEPLOYMENT != 'none'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Deployment Failed - Automatic Rollback Executed',
            body: `
            ## Deployment Failure
            
            **Commit:** ${{ github.sha }}
            **Branch:** ${{ github.ref }}
            **Workflow:** ${{ github.workflow }}
            **Run:** ${{ github.run_id }}
            
            The deployment failed validation and has been automatically rolled back to the previous successful deployment.
            
            **Rollback URL:** https://${{ env.PREV_DEPLOYMENT }}
            
            Please investigate the failure and fix the issues before attempting to deploy again.
            `,
            labels: ['bug', 'deployment', 'rollback']
          });

# Separate job for development branch
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Vercel CLI
      run: npm install -g vercel@latest
      
    - name: Deploy to staging
      run: |
        vercel deploy --token=${{ secrets.VERCEL_TOKEN }}
        echo "Staging deployment completed"