name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=staging-

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=staging
            NEXT_PUBLIC_APP_ENV=staging

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            # Navigate to app directory
            cd /opt/astral-field
            
            # Pull latest changes
            git pull origin develop
            
            # Update environment variables
            echo "NODE_ENV=staging" > .env.staging
            echo "DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" >> .env.staging
            echo "REDIS_URL=${{ secrets.STAGING_REDIS_URL }}" >> .env.staging
            echo "NEXTAUTH_SECRET=${{ secrets.STAGING_NEXTAUTH_SECRET }}" >> .env.staging
            echo "NEXTAUTH_URL=${{ secrets.STAGING_NEXTAUTH_URL }}" >> .env.staging
            echo "AUTH0_SECRET=${{ secrets.STAGING_AUTH0_SECRET }}" >> .env.staging
            echo "AUTH0_BASE_URL=${{ secrets.STAGING_AUTH0_BASE_URL }}" >> .env.staging
            echo "AUTH0_ISSUER_BASE_URL=${{ secrets.STAGING_AUTH0_ISSUER_BASE_URL }}" >> .env.staging
            echo "AUTH0_CLIENT_ID=${{ secrets.STAGING_AUTH0_CLIENT_ID }}" >> .env.staging
            echo "AUTH0_CLIENT_SECRET=${{ secrets.STAGING_AUTH0_CLIENT_SECRET }}" >> .env.staging
            echo "ANTHROPIC_API_KEY=${{ secrets.STAGING_ANTHROPIC_API_KEY }}" >> .env.staging
            echo "NFL_API_KEY=${{ secrets.STAGING_NFL_API_KEY }}" >> .env.staging
            
            # Stop existing containers
            docker-compose -f docker-compose.staging.yml down
            
            # Pull new images
            docker-compose -f docker-compose.staging.yml pull
            
            # Run database migrations
            docker-compose -f docker-compose.staging.yml run --rm app npm run db:migrate
            
            # Start services
            docker-compose -f docker-compose.staging.yml up -d
            
            # Wait for services to be ready
            sleep 30
            
            # Run health check
            curl -f http://localhost:3000/api/health || exit 1

      - name: Run staging tests
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/astral-field
            
            # Run integration tests against staging
            docker-compose -f docker-compose.staging.yml exec -T app npm run test:integration
            
            # Run performance tests
            docker-compose -f docker-compose.staging.yml exec -T app npm run perf:test:quick

      - name: Update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: staging
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Notify deployment success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: |
            üöÄ Staging deployment completed successfully!
            
            **Environment:** Staging
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **URL:** ${{ secrets.STAGING_URL }}
            
            Ready for testing!
          SLACK_COLOR: good

      - name: Notify deployment failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: |
            ‚ùå Staging deployment failed!
            
            **Environment:** Staging
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            
            Please check the logs and fix the issues.
          SLACK_COLOR: danger