// Clean Fantasy Football Platform Schema - ESPN/Free APIs Only
// No authentication required APIs for maximum reliability

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== AUTHENTICATION & USERS ====================

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  image           String?
  emailVerified   DateTime?
  role            UserRole  @default(PLAYER)
  teamName        String?
  hashedPassword  String?   // For secure password storage
  avatar          String?   // User avatar/emoji
  profileId       String?   // External profile identifier
  notificationSettings Json? // User notification preferences
  isAdmin         Boolean   @default(false)
  lastActiveAt    DateTime?
  onboardingCompleted Boolean @default(false)
  onboardingCompletedAt DateTime?
  onboardingSteps Json?     // Array of completed onboarding steps
  accounts        Account[]
  sessions        Session[]
  userSessions    UserSession[]
  leagues         League[]
  teams           Team[]
  messages        Message[] @relation("UserMessages")
  preferences     UserPreferences?
  auditLogs       AuditLog[]
  playerActivities PlayerActivity[]
  playerNotes     PlayerNote[]
  feedback        Feedback[] @relation("UserFeedback")
  feedbackResponses FeedbackResponse[] @relation("UserFeedbackResponses")
  chatMessages    ChatMessage[]
  messageReactions MessageReaction[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([email])
  @@index([role])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("sessions")
}

model UserSession {
  id           String   @id @default(cuid())
  sessionId    String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive     Boolean  @default(true)
  lastActivity DateTime @default(now())
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([userId])
  @@index([sessionId])
  @@map("user_sessions")
}

// ==================== LEAGUES & TEAMS ====================

model League {
  id              String    @id @default(cuid())
  name            String
  commissionerId  String
  commissioner    User      @relation(fields: [commissionerId], references: [id])
  teams           Team[]
  settings        Json      @default("{}")
  scoringSettings Json      @default("{}")
  rosterSettings  Json      @default("{}")
  draftSettings   Json      @default("{}")
  currentWeek     Int       @default(1)
  season          String    @default("2024")
  isActive        Boolean   @default(true)
  draftDate       DateTime?
  playoffs        Boolean   @default(false)
  matchups        Matchup[]
  transactions    Transaction[]
  messages        Message[]
  drafts          Draft[]
  chatMessages    ChatMessage[]
  jobExecutions   JobExecution[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([commissionerId])
  @@index([season, isActive])
  @@map("leagues")
}

model Team {
  id              String    @id @default(cuid())
  name            String
  logo            String?
  ownerId         String
  owner           User      @relation(fields: [ownerId], references: [id])
  leagueId        String
  league          League    @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  roster          Roster[]
  wins            Int       @default(0)
  losses          Int       @default(0)
  ties            Int       @default(0)
  pointsFor       Float     @default(0)
  pointsAgainst   Float     @default(0)
  standing        Int       @default(0)
  playoffSeed     Int?
  waiverPriority  Int       @default(10)  // Waiver wire priority
  faabBudget      Int       @default(1000) // FAAB budget
  faabSpent       Int       @default(0)    // FAAB spent
  homeMatchups    Matchup[] @relation("HomeTeam")
  awayMatchups    Matchup[] @relation("AwayTeam")
  transactions    Transaction[]
  tradeProposals  TradeProposal[]
  rosterPlayers   RosterPlayer[]
  
  // Draft relationships
  currentDrafts   Draft[]       @relation("CurrentDraftTeam")
  draftPicks      DraftPick[]   @relation("DraftPickTeam")  
  draftOrders     DraftOrder[]  @relation("DraftOrderTeam")
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([ownerId])
  @@index([leagueId])
  @@unique([leagueId, name])
  @@map("teams")
}

// ==================== PLAYERS & STATS ====================

model Player {
  id              String    @id @default(cuid())
  espnId          String    @unique
  yahooId         String?   @unique
  sleeperPlayerId String?   @unique  // Sleeper API player ID
  name            String
  firstName       String?
  lastName        String?
  position        Position
  nflTeam         String?
  team            String?   // Alias for nflTeam for compatibility
  jerseyNumber    Int?
  height          String?
  weight          String?
  age             Int?
  experience      Int?
  college         String?
  imageUrl        String?
  status          String    @default("active") // active, injured, ir, out, suspended
  injuryStatus    String?
  injuryDetails   String?
  stats           PlayerStats[]
  projections     Projection[]
  playerProjections PlayerProjection[]
  roster          Roster[]
  rosterPlayers   RosterPlayer[]
  news            PlayerNews[]
  
  // Draft relationships
  draftPicks      DraftPick[]   @relation("DraftPickPlayer")
  
  byeWeek         Int?
  adp             Float?    // Average Draft Position
  rank            Int?
  isFantasyRelevant Boolean @default(true)
  lastUpdated      DateTime @default(now())
  isRookie         Boolean  @default(false)
  isDynastyTarget  Boolean  @default(false)
  dynastyRank      Int?
  isActive         Boolean  @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([position])
  @@index([nflTeam])
  @@index([status])
  @@index([name])
  @@index([sleeperPlayerId])
  @@index([position, status]) // Composite index for common queries
  @@map("players")
}

model Roster {
  id              String    @id @default(cuid())
  teamId          String
  team            Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  playerId        String
  player          Player    @relation(fields: [playerId], references: [id])
  position        Position    // QB, RB1, RB2, WR1, WR2, TE, FLEX, K, DEF, BENCH
  isStarter       Boolean   @default(true)
  isLocked        Boolean   @default(false) // Game/lineup lock status
  acquisitionDate DateTime  @default(now())
  acquisitionType String    @default("draft") // draft, trade, waiver, free_agent
  
  @@unique([teamId, playerId])
  @@index([teamId])
  @@index([playerId])
  @@map("roster")
}

model PlayerStats {
  id              String    @id @default(cuid())
  playerId        String
  player          Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  week            Int
  season          String
  gameId          String?   // Added gameId field
  gameDate        DateTime?
  opponent        String?
  stats           Json      // All stats in JSON format
  fantasyPoints   Float     @default(0)
  isProjection    Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([playerId, week, season])
  @@index([playerId, season])
  @@index([week, season])
  @@index([playerId, week, season]) // Composite index for efficient lookups
  @@map("player_stats")
}

model Projection {
  id              String    @id @default(cuid())
  playerId        String
  player          Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  week            Int
  season          String
  source          String    @default("espn") // espn, yahoo, custom
  projectedPoints Float
  confidence      Float?    // 0-1 confidence score
  projectedStats  Json
  createdAt       DateTime  @default(now())
  
  @@unique([playerId, week, season, source])
  @@index([playerId, week, season])
  @@map("projections")
}

// ==================== MATCHUPS & SCORING ====================

model Matchup {
  id              String    @id @default(cuid())
  leagueId        String
  league          League    @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  week            Int
  season          String    @default("2024")  // Season field for queries
  homeTeamId      String
  homeTeam        Team      @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeamId      String
  awayTeam        Team      @relation("AwayTeam", fields: [awayTeamId], references: [id])
  homeScore       Float     @default(0)
  awayScore       Float     @default(0)
  isComplete      Boolean   @default(false)
  isPlayoff       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([leagueId, week, homeTeamId, awayTeamId])
  @@index([leagueId, week])
  @@index([season, week])
  @@index([leagueId, week, season]) // Composite index for matchup queries
  @@map("matchups")
}

// ==================== TRANSACTIONS & TRADES ====================

model Transaction {
  id              String    @id @default(cuid())
  leagueId        String
  league          League    @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  teamId          String
  team            Team      @relation(fields: [teamId], references: [id])
  type            String    // add, drop, trade, waiver
  status          String    @default("pending") // pending, completed, failed, cancelled
  playerIds       String[]
  week            Int?      // Week number for transaction
  relatedData     Json?     // Additional transaction data
  processedAt     DateTime?
  createdAt       DateTime  @default(now())
  
  @@index([leagueId, status])
  @@index([teamId])
  @@map("transactions")
}

model TradeProposal {
  id              String    @id @default(cuid())
  proposingTeamId String
  proposingTeam   Team      @relation(fields: [proposingTeamId], references: [id])
  receivingTeamId String
  givingPlayerIds String[]
  receivingPlayerIds String[]
  status          String    @default("pending") // pending, accepted, rejected, cancelled
  message         String?
  createdAt       DateTime  @default(now())
  respondedAt     DateTime?
  
  @@index([proposingTeamId])
  @@index([status])
  @@map("trade_proposals")
}

// ==================== SOCIAL FEATURES ====================

model PlayerLike {
  id        String   @id @default(cuid())
  playerId  String
  userId    String
  createdAt DateTime @default(now())
  
  @@unique([playerId, userId])
  @@index([playerId])
  @@index([userId])
  @@map("player_likes")
}

model PlayerWatch {
  id        String   @id @default(cuid())
  playerId  String
  userId    String
  createdAt DateTime @default(now())
  
  @@unique([playerId, userId])
  @@index([playerId])
  @@index([userId])
  @@map("player_watchlist")
}

model PlayerNote {
  id        String   @id @default(cuid())
  playerId  String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  
  @@unique([playerId, userId])
  @@index([playerId])
  @@index([userId])
  @@map("player_notes")
}

model PlayerActivity {
  id         String   @id @default(cuid())
  playerId   String
  userId     String
  type       String   // like, watch, note, share
  action     String   // alias for type for backward compatibility
  content    String?  // for note content
  metadata   Json?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  
  @@index([playerId])
  @@index([userId])
  @@index([type])
  @@index([action])
  @@index([createdAt])
  @@map("player_activities")
}

model ErrorLog {
  id         String   @id @default(cuid())
  message    String
  stack      String?
  url        String?
  userAgent  String?
  timestamp  DateTime
  category   String
  severity   String
  userId     String?
  sessionId  String?
  metadata   Json?
  resolved   Boolean  @default(false)
  createdAt  DateTime @default(now())
  
  @@index([category])
  @@index([severity])
  @@index([resolved])
  @@index([createdAt])
  @@map("error_logs")
}

// ==================== DRAFT SYSTEM ====================

model Draft {
  id              String      @id @default(cuid())
  leagueId        String
  league          League      @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  status          DraftStatus @default(SCHEDULED)
  type            DraftType   @default(SNAKE)
  settings        Json        // { rounds, timePerPick, startTime, autopickSettings }
  currentRound    Int         @default(1)
  currentPick     Int         @default(1)
  currentTeamId   String?
  currentTeam     Team?       @relation("CurrentDraftTeam", fields: [currentTeamId], references: [id])
  timeRemaining   Int         @default(90) // seconds
  totalRounds     Int         @default(15)
  timePerPick     Int         @default(90)
  picks           DraftPick[]
  draftOrder      DraftOrder[]
  startedAt       DateTime?
  pausedAt        DateTime?
  completedAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([leagueId, status])
  @@index([status])
  @@map("drafts")
}

model DraftPick {
  id              String    @id @default(cuid())
  draftId         String
  draft           Draft     @relation(fields: [draftId], references: [id], onDelete: Cascade)
  pickNumber      Int       // Overall pick number (1, 2, 3...)
  round           Int
  pickInRound     Int       // Pick within round (1, 2, 3...)
  teamId          String
  team            Team      @relation("DraftPickTeam", fields: [teamId], references: [id])
  playerId        String?
  player          Player?   @relation("DraftPickPlayer", fields: [playerId], references: [id])
  timeUsed        Int       @default(0) // seconds used for this pick
  isAutoPick      Boolean   @default(false)
  autoPickReason  String?   // "timeout", "offline", "manual"
  pickMadeAt      DateTime  @default(now())
  
  @@unique([draftId, pickNumber])
  @@index([draftId, round])
  @@index([teamId])
  @@index([playerId])
  @@map("draft_picks")
}

model DraftOrder {
  id              String    @id @default(cuid())
  draftId         String
  draft           Draft     @relation(fields: [draftId], references: [id], onDelete: Cascade)
  teamId          String
  team            Team      @relation("DraftOrderTeam", fields: [teamId], references: [id])
  pickOrder       Int       // 1-10 for 10 team league (draft position)
  
  @@unique([draftId, teamId])
  @@unique([draftId, pickOrder])
  @@index([draftId])
  @@map("draft_order")
}

enum DraftStatus {
  SCHEDULED
  IN_PROGRESS  
  PAUSED
  COMPLETED
  CANCELLED
}

enum DraftType {
  SNAKE
  AUCTION
  LINEAR
}

// ==================== NEWS & COMMUNICATION ====================

model PlayerNews {
  id              String    @id @default(cuid())
  playerId        String
  player          Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  headline        String
  body            String
  source          String
  url             String?
  publishedAt     DateTime
  createdAt       DateTime  @default(now())
  
  @@unique([playerId, headline])
  @@index([playerId])
  @@index([publishedAt])
  @@map("player_news")
}

model Message {
  id              String    @id @default(cuid())
  leagueId        String
  league          League    @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  userId          String
  user            User      @relation("UserMessages", fields: [userId], references: [id], onDelete: Cascade)
  content         String
  createdAt       DateTime  @default(now())
  
  @@index([leagueId])
  @@index([userId])
  @@map("messages")
}

model Notification {
  id              String    @id @default(cuid())
  type            String
  title           String
  body            String    @default("")
  message         String?   // Message field
  data            Json?
  priority        String    @default("normal") // high, normal, low
  userId          String?   // User ID for direct notifications
  createdAt       DateTime  @default(now())
  targets         NotificationTarget[]
  delivery        NotificationDelivery[]
  
  @@index([type])
  @@index([userId])
  @@index([createdAt])
  @@map("notifications")
}

model NotificationTarget {
  id              String       @id @default(cuid())
  notificationId  String
  notification    Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  userId          String
  teamId          String?
  leagueId        String?
  createdAt       DateTime     @default(now())
  
  @@index([userId])
  @@index([notificationId])
  @@map("notification_targets")
}

model NotificationDelivery {
  id              String       @id @default(cuid())
  notificationId  String
  notification    Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  userId          String
  status          String       // delivered, failed, pending
  deliveredAt     DateTime?
  readAt          DateTime?
  error           String?
  createdAt       DateTime     @default(now())
  
  @@index([userId])
  @@index([notificationId])
  @@unique([notificationId, userId])
  @@map("notification_delivery")
}

model PushSubscription {
  id              String    @id @default(cuid())
  userId          String    @unique
  endpoint        String
  p256dh          String
  auth            String
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([userId])
  @@map("push_subscriptions")
}

model UserPreferences {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications Boolean @default(true)
  pushNotifications Boolean  @default(true)
  theme           String    @default("dark")
  timezone        String    @default("America/New_York")
  favoriteTeam    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("user_preferences")
}

// ==================== ROSTER PLAYER ====================

model RosterPlayer {
  id              String    @id @default(cuid())
  teamId          String
  team            Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  playerId        String
  player          Player    @relation(fields: [playerId], references: [id])
  position        Position
  isStarter       Boolean   @default(true)
  isLocked        Boolean   @default(false)
  acquisitionDate DateTime  @default(now())
  acquisitionType String    @default("draft")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([teamId, playerId])
  @@index([teamId])
  @@index([playerId])
  @@map("roster_players")
}

// ==================== AUDIT LOG & PROJECTIONS ====================

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action    String
  details   Json?
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model PlayerProjection {
  id         String   @id @default(cuid())
  playerId   String
  player     Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  week       Int
  season     Int
  points     Float
  source     String
  confidence Float?   // 0-1 confidence score
  stats      Json?    // Projected stats breakdown
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([playerId, week, season, source])
  @@index([playerId, week, season])
  @@index([source])
  @@map("player_projections")
}

// ==================== ENUMS ====================

enum Position {
  QB
  RB
  WR
  TE
  K
  DEF
  DST
  FLEX
  SUPER_FLEX
  BENCH
  IR
  LB
  DB
  DL
  CB
  S
}

enum RosterSlot {
  QB
  RB1
  RB2
  WR1
  WR2
  WR3
  TE
  FLEX
  SUPER_FLEX
  K
  DEF
  BENCH
  IR
}

enum AcquisitionType {
  DRAFT
  TRADE
  WAIVER
  FREE_AGENT
}

enum UserRole {
  ADMIN
  COMMISSIONER
  PLAYER
}

// ==================== FEEDBACK SYSTEM ====================

model Feedback {
  id                String             @id @default(cuid())
  userId            String
  user              User               @relation("UserFeedback", fields: [userId], references: [id], onDelete: Cascade)
  type              FeedbackType       @default(GENERAL)
  category          FeedbackCategory   @default(GENERAL)
  title             String
  description       String
  priority          FeedbackPriority   @default(MEDIUM)
  status            FeedbackStatus     @default(OPEN)
  steps             String?            // Steps to reproduce (for bugs)
  expectedBehavior  String?            // Expected behavior (for bugs)
  actualBehavior    String?            // Actual behavior (for bugs)
  browserInfo       String?            // Browser information
  pageUrl           String?            // Page URL where feedback originated
  screenshot        String?            // Screenshot URL
  rating            Int?               // 1-5 rating (for general feedback)
  responses         FeedbackResponse[]
  lastResponseAt    DateTime?
  resolvedAt        DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  @@index([userId])
  @@index([type])
  @@index([category])
  @@index([priority])
  @@index([status])
  @@index([createdAt])
  @@map("feedback")
}

model FeedbackResponse {
  id                  String         @id @default(cuid())
  feedbackId          String
  feedback            Feedback       @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  respondedBy         String
  respondedByUser     User           @relation("UserFeedbackResponses", fields: [respondedBy], references: [id])
  response            String
  status              FeedbackStatus
  estimatedResolution DateTime?
  createdAt           DateTime       @default(now())
  
  @@index([feedbackId])
  @@index([respondedBy])
  @@index([createdAt])
  @@map("feedback_responses")
}

enum FeedbackType {
  BUG
  FEATURE_REQUEST
  GENERAL
  UI_UX
  PERFORMANCE
}

enum FeedbackCategory {
  DRAFT
  TRADES
  SCORING
  MOBILE
  GENERAL
  PERFORMANCE
}

enum FeedbackPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FeedbackStatus {
  OPEN
  ACKNOWLEDGED
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// ==================== SESSION TRACKING & ANALYTICS ====================

model PerformanceMetric {
  id          String               @id @default(cuid())
  metricName  String
  metricType  PerformanceMetricType
  value       Float
  metadata    Json?
  timestamp   DateTime             @default(now())
  
  @@index([metricName])
  @@index([metricType])
  @@index([timestamp])
  @@map("performance_metrics")
}

enum PerformanceMetricType {
  PAGE_LOAD
  API_RESPONSE
  DATABASE_QUERY
  CACHE_HIT
  ERROR_RATE
  MEMORY_USAGE
}

// ==================== SOCIAL & CHAT SYSTEM ====================

model ChatMessage {
  id          String             @id @default(cuid())
  leagueId    String
  league      League             @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  userId      String
  user        User               @relation(fields: [userId], references: [id])
  content     String
  type        ChatMessageType    @default(TEXT)
  metadata    String?            // JSON string for additional data
  replyToId   String?
  replyTo     ChatMessage?       @relation("MessageReplies", fields: [replyToId], references: [id])
  replies     ChatMessage[]      @relation("MessageReplies")
  reactions   MessageReaction[]
  edited      Boolean            @default(false)
  editedAt    DateTime?
  deleted     Boolean            @default(false)
  deletedAt   DateTime?
  createdAt   DateTime           @default(now())
  
  @@index([leagueId])
  @@index([userId])
  @@index([createdAt])
  @@map("chat_messages")
}

model MessageReaction {
  id          String       @id @default(cuid())
  messageId   String
  message     ChatMessage  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  emoji       String
  createdAt   DateTime     @default(now())
  
  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
  @@map("message_reactions")
}

enum ChatMessageType {
  TEXT
  TRADE
  SCORE_UPDATE
  TRASH_TALK
  ANNOUNCEMENT
  POLL
}

// ==================== JOB EXECUTION SYSTEM ====================

model JobExecution {
  id            String   @id @default(cuid())
  jobName       String
  jobType       String   // 'waiver_processing', 'data_sync', 'cache_reconcile', 'archive'
  status        String   // 'pending', 'running', 'completed', 'failed'
  startedAt     DateTime @default(now())
  completedAt   DateTime?
  error         String?
  metadata      Json?    // Job-specific data
  result        Json?    // Job execution results
  duration      Int?     // Duration in milliseconds
  retryCount    Int      @default(0)
  maxRetries    Int      @default(3)
  scheduledFor  DateTime?
  leagueId      String?
  league        League?  @relation(fields: [leagueId], references: [id])
  
  @@index([jobType, status])
  @@index([scheduledFor])
  @@index([leagueId])
  @@map("job_executions")
}