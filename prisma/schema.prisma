// Clean Fantasy Football Platform Schema - ESPN/Free APIs Only
// No authentication required APIs for maximum reliability

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== AUTHENTICATION & USERS ====================

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  image           String?
  emailVerified   DateTime?
  role            UserRole  @default(PLAYER)
  teamName        String?
  hashedPassword  String?   // For secure password storage
  avatar          String?   // User avatar/emoji
  profileId       String?   // External profile identifier
  accounts        Account[]
  sessions        Session[]
  userSessions    UserSession[]
  leagues         League[]
  teams           Team[]
  notifications   Notification[]
  messages        Message[] @relation("UserMessages")
  preferences     UserPreferences?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([email])
  @@index([role])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("sessions")
}

model UserSession {
  id           String   @id @default(cuid())
  sessionId    String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive     Boolean  @default(true)
  // lastActivity DateTime @default(now()) // Temporarily disabled - column doesn't exist in current DB
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([userId])
  @@index([sessionId])
  @@map("user_sessions")
}

// ==================== LEAGUES & TEAMS ====================

model League {
  id              String    @id @default(cuid())
  name            String
  commissionerId  String
  commissioner    User      @relation(fields: [commissionerId], references: [id])
  teams           Team[]
  settings        Json      @default("{}")
  scoringSettings Json      @default("{}")
  rosterSettings  Json      @default("{}")
  draftSettings   Json      @default("{}")
  currentWeek     Int       @default(1)
  season          String    @default("2024")
  isActive        Boolean   @default(true)
  draftDate       DateTime?
  playoffs        Boolean   @default(false)
  matchups        Matchup[]
  transactions    Transaction[]
  messages        Message[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([commissionerId])
  @@index([season, isActive])
  @@map("leagues")
}

model Team {
  id              String    @id @default(cuid())
  name            String
  logo            String?
  ownerId         String
  owner           User      @relation(fields: [ownerId], references: [id])
  leagueId        String
  league          League    @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  roster          Roster[]
  wins            Int       @default(0)
  losses          Int       @default(0)
  ties            Int       @default(0)
  pointsFor       Float     @default(0)
  pointsAgainst   Float     @default(0)
  standing        Int       @default(0)
  playoffSeed     Int?
  waiverPriority  Int       @default(10)  // Waiver wire priority
  faabBudget      Int       @default(1000) // FAAB budget
  faabSpent       Int       @default(0)    // FAAB spent
  homeMatchups    Matchup[] @relation("HomeTeam")
  awayMatchups    Matchup[] @relation("AwayTeam")
  transactions    Transaction[]
  tradeProposals  TradeProposal[]
  rosterPlayers   RosterPlayer[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([ownerId])
  @@index([leagueId])
  @@unique([leagueId, name])
  @@map("teams")
}

// ==================== PLAYERS & STATS ====================

model Player {
  id              String    @id @default(cuid())
  espnId          String    @unique
  yahooId         String?   @unique
  sleeperPlayerId String?   @unique  // Sleeper API player ID
  name            String
  firstName       String?
  lastName        String?
  position        Position
  nflTeam         String?
  team            String?   // Alias for nflTeam for compatibility
  jerseyNumber    Int?
  height          String?
  weight          String?
  age             Int?
  experience      Int?
  college         String?
  imageUrl        String?
  status          String    @default("active") // active, injured, ir, out, suspended
  injuryStatus    String?
  injuryDetails   String?
  stats           PlayerStats[]
  projections     Projection[]
  roster          Roster[]
  rosterPlayers   RosterPlayer[]
  news            PlayerNews[]
  byeWeek         Int?
  adp             Float?    // Average Draft Position
  rank            Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([position])
  @@index([nflTeam])
  @@index([status])
  @@index([name])
  @@index([sleeperPlayerId])
  @@index([position, status]) // Composite index for common queries
  @@map("players")
}

model Roster {
  id              String    @id @default(cuid())
  teamId          String
  team            Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  playerId        String
  player          Player    @relation(fields: [playerId], references: [id])
  position        Position    // QB, RB1, RB2, WR1, WR2, TE, FLEX, K, DEF, BENCH
  isStarter       Boolean   @default(true)
  isLocked        Boolean   @default(false) // Game/lineup lock status
  acquisitionDate DateTime  @default(now())
  acquisitionType String    @default("draft") // draft, trade, waiver, free_agent
  
  @@unique([teamId, playerId])
  @@index([teamId])
  @@index([playerId])
  @@map("roster")
}

model PlayerStats {
  id              String    @id @default(cuid())
  playerId        String
  player          Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  week            Int
  season          String
  gameId          String?   // Added gameId field
  gameDate        DateTime?
  opponent        String?
  stats           Json      // All stats in JSON format
  fantasyPoints   Float     @default(0)
  isProjection    Boolean   @default(false)
  createdAt       DateTime  @default(now())
  
  @@unique([playerId, week, season])
  @@index([playerId, season])
  @@index([week, season])
  @@index([playerId, week, season]) // Composite index for efficient lookups
  @@map("player_stats")
}

model Projection {
  id              String    @id @default(cuid())
  playerId        String
  player          Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  week            Int
  season          String
  source          String    @default("espn") // espn, yahoo, custom
  projectedPoints Float
  confidence      Float?    // 0-1 confidence score
  projectedStats  Json
  createdAt       DateTime  @default(now())
  
  @@unique([playerId, week, season, source])
  @@index([playerId, week, season])
  @@map("projections")
}

// ==================== MATCHUPS & SCORING ====================

model Matchup {
  id              String    @id @default(cuid())
  leagueId        String
  league          League    @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  week            Int
  season          String    @default("2024")  // Season field for queries
  homeTeamId      String
  homeTeam        Team      @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeamId      String
  awayTeam        Team      @relation("AwayTeam", fields: [awayTeamId], references: [id])
  homeScore       Float     @default(0)
  awayScore       Float     @default(0)
  isComplete      Boolean   @default(false)
  isPlayoff       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([leagueId, week, homeTeamId, awayTeamId])
  @@index([leagueId, week])
  @@index([season, week])
  @@index([leagueId, week, season]) // Composite index for matchup queries
  @@map("matchups")
}

// ==================== TRANSACTIONS & TRADES ====================

model Transaction {
  id              String    @id @default(cuid())
  leagueId        String
  league          League    @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  teamId          String
  team            Team      @relation(fields: [teamId], references: [id])
  type            String    // add, drop, trade, waiver
  status          String    @default("pending") // pending, completed, failed, cancelled
  playerIds       String[]
  relatedData     Json?     // Additional transaction data
  processedAt     DateTime?
  createdAt       DateTime  @default(now())
  
  @@index([leagueId, status])
  @@index([teamId])
  @@map("transactions")
}

model TradeProposal {
  id              String    @id @default(cuid())
  proposingTeamId String
  proposingTeam   Team      @relation(fields: [proposingTeamId], references: [id])
  receivingTeamId String
  givingPlayerIds String[]
  receivingPlayerIds String[]
  status          String    @default("pending") // pending, accepted, rejected, cancelled
  message         String?
  createdAt       DateTime  @default(now())
  respondedAt     DateTime?
  
  @@index([proposingTeamId])
  @@index([status])
  @@map("trade_proposals")
}

// ==================== NEWS & COMMUNICATION ====================

model PlayerNews {
  id              String    @id @default(cuid())
  playerId        String
  player          Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)
  headline        String
  body            String
  source          String
  url             String?
  publishedAt     DateTime
  createdAt       DateTime  @default(now())
  
  @@unique([playerId, headline])
  @@index([playerId])
  @@index([publishedAt])
  @@map("player_news")
}

model Message {
  id              String    @id @default(cuid())
  leagueId        String
  league          League    @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  userId          String
  user            User      @relation("UserMessages", fields: [userId], references: [id], onDelete: Cascade)
  content         String
  createdAt       DateTime  @default(now())
  
  @@index([leagueId])
  @@index([userId])
  @@map("messages")
}

model Notification {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type            String
  title           String
  message         String
  data            Json?
  read            Boolean   @default(false)
  createdAt       DateTime  @default(now())
  
  @@index([userId, read])
  @@map("notifications")
}

model UserPreferences {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications Boolean @default(true)
  pushNotifications Boolean  @default(true)
  theme           String    @default("dark")
  timezone        String    @default("America/New_York")
  favoriteTeam    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("user_preferences")
}

// ==================== ROSTER PLAYER ====================

model RosterPlayer {
  id              String    @id @default(cuid())
  teamId          String
  team            Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  playerId        String
  player          Player    @relation(fields: [playerId], references: [id])
  position        Position
  isStarter       Boolean   @default(true)
  isLocked        Boolean   @default(false)
  acquisitionDate DateTime  @default(now())
  acquisitionType String    @default("draft")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([teamId, playerId])
  @@index([teamId])
  @@index([playerId])
  @@map("roster_players")
}

// ==================== ENUMS ====================

enum Position {
  QB
  RB
  WR
  TE
  K
  DEF
  DST
  FLEX
  SUPER_FLEX
  BENCH
  IR
  LB
  DB
  DL
  CB
  S
}

enum RosterSlot {
  QB
  RB1
  RB2
  WR1
  WR2
  WR3
  TE
  FLEX
  SUPER_FLEX
  K
  DEF
  BENCH
  IR
}

enum AcquisitionType {
  DRAFT
  TRADE
  WAIVER
  FREE_AGENT
}

enum UserRole {
  ADMIN
  COMMISSIONER
  PLAYER
}