// Phoenix: Elite Backend Database Schema
// Optimized for performance, scalability, and reliability

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions", "relationJoins"]
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  image          String?
  hashedPassword String?
  role           String    @default("USER")
  teamName       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Security fields for Guardian middleware
  loginAttempts  Int       @default(0)
  lockedUntil    DateTime?
  sessionId      String?
  lastLoginAt    DateTime?

  // Relations
  teams          Team[]
  preferences    UserPreferences?
  chatMessages   ChatMessage[]

  @@map("users")
}

model UserPreferences {
  id             String  @id @default(cuid())
  userId         String  @unique
  theme          String  @default("system")
  notifications  String? // JSON stored as string for SQLite
  emailUpdates   Boolean @default(true)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model League {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  playoffs    Boolean  @default(false)
  currentWeek Int      @default(1)
  maxTeams    Int      @default(12)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teams    Team[]
  matchups Matchup[]
  leagueAnalytics LeagueAnalytics[]

  @@map("leagues")
}

model Team {
  id       String @id @default(cuid())
  name     String
  ownerId  String
  leagueId String
  wins     Int    @default(0)
  losses   Int    @default(0)
  ties     Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner             User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  league            League           @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  roster            RosterPlayer[]
  homeMatchups      Matchup[]        @relation("HomeTeam")
  awayMatchups      Matchup[]        @relation("AwayTeam")
  proposedTrades    TradeProposal[]  @relation("ProposingTeam")
  receivedTrades    TradeProposal[]  @relation("ReceivingTeam")
  weeklyStats       WeeklyTeamStats[]
  scheduleStrength  StrengthOfSchedule[]

  @@unique([ownerId, leagueId])
  @@map("teams")
}

model Player {
  id                 String    @id @default(cuid())
  name               String
  position           String
  nflTeam            String
  isFantasyRelevant  Boolean   @default(true)
  adp                Float?
  rank               Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  roster       RosterPlayer[]
  stats        PlayerStats[]
  projections  PlayerProjection[]
  news         PlayerNews[]
  weeklyAnalytics PlayerWeeklyAnalytics[]
  waiverAnalytics WaiverWireAnalytics[]
  consistency     PlayerConsistency[]

  @@map("players")
}

model PlayerStats {
  id            String @id @default(cuid())
  playerId      String
  week          Int
  season        Int    @default(2025)
  fantasyPoints Float  @default(0)
  stats         String // JSON stored as string for SQLite

  // Relations
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, week, season])
  @@map("player_stats")
}

model PlayerProjection {
  id               String @id @default(cuid())
  playerId         String
  week             Int?
  season           Int    @default(2025)
  projectedPoints  Float
  confidence       Float  @default(0.5)

  // Relations
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("player_projections")
}

model PlayerNews {
  id          String   @id @default(cuid())
  playerId    String
  title       String
  content     String
  source      String
  severity    String   @default("LOW")
  publishedAt DateTime @default(now())

  // Relations
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("player_news")
}

model RosterPlayer {
  id        String  @id @default(cuid())
  teamId    String
  playerId  String
  position  String  @default("BENCH")
  isStarter Boolean @default(false)

  // Relations
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([teamId, playerId])
  @@map("roster_players")
}

model Matchup {
  id         String  @id @default(cuid())
  week       Int
  season     Int     @default(2025)
  homeTeamId String
  awayTeamId String
  homeScore  Float   @default(0)
  awayScore  Float   @default(0)
  isComplete Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  homeTeam Team   @relation("HomeTeam", fields: [homeTeamId], references: [id], onDelete: Cascade)
  awayTeam Team   @relation("AwayTeam", fields: [awayTeamId], references: [id], onDelete: Cascade)
  leagueId String
  analytics MatchupAnalytics[]

  @@unique([week, season, homeTeamId, awayTeamId])
  @@map("matchups")
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  leagueId  String
  content   String
  type      String   @default("TEXT") // TEXT, TRADE, ANNOUNCEMENT
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model TradeProposal {
  id                    String @id @default(cuid())
  proposingTeamId       String
  receivingTeamId       String
  givingPlayerIds       String // JSON array stored as string
  receivingPlayerIds    String // JSON array stored as string
  message               String?
  status                String @default("PENDING") // PENDING, ACCEPTED, REJECTED, EXPIRED
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  proposingTeam Team @relation("ProposingTeam", fields: [proposingTeamId], references: [id], onDelete: Cascade)
  receivingTeam Team @relation("ReceivingTeam", fields: [receivingTeamId], references: [id], onDelete: Cascade)

  @@map("trade_proposals")
}

// Vortex Analytics Models - Advanced Data Pipeline

model WeeklyTeamStats {
  id              String  @id @default(cuid())
  teamId          String
  week            Int
  season          Int     @default(2025)
  totalPoints     Float   @default(0)
  projectedPoints Float   @default(0)
  benchPoints     Float   @default(0)
  optimalPoints   Float   @default(0) // Best possible lineup
  rank            Int?
  movingAverage   Float   @default(0) // 3-week moving average
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, week, season])
  @@map("weekly_team_stats")
}

model PlayerWeeklyAnalytics {
  id                    String  @id @default(cuid())
  playerId              String
  week                  Int
  season                Int     @default(2025)
  fantasyPoints         Float   @default(0)
  projectedPoints       Float   @default(0)
  target                Int     @default(0)
  receptions            Int     @default(0)
  rushingYards          Int     @default(0)
  passingYards          Int     @default(0)
  touchdowns            Int     @default(0)
  snapPercentage        Float   @default(0)
  redZoneTargets        Int     @default(0)
  goalLineCarries       Int     @default(0)
  ownership             Float   @default(0) // League ownership %
  consistencyScore      Float   @default(0) // Variance from projection
  volumeScore           Float   @default(0) // Touch opportunity rating
  efficiencyScore       Float   @default(0) // Points per touch
  trendScore            Float   @default(0) // 3-week trend indicator
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, week, season])
  @@map("player_weekly_analytics")
}

model MatchupAnalytics {
  id                  String  @id @default(cuid())
  matchupId           String
  week                Int
  season              Int     @default(2025)
  homeTeamProjection  Float   @default(0)
  awayTeamProjection  Float   @default(0)
  winProbability      Float   @default(0.5) // Home team win probability
  volatility          Float   @default(0) // Projection uncertainty
  keyPlayers          String  // JSON array of impactful player IDs
  weatherImpact       Float   @default(0)
  injuryRisk          Float   @default(0)
  confidenceLevel     Float   @default(0.5)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  matchup Matchup @relation(fields: [matchupId], references: [id], onDelete: Cascade)

  @@unique([matchupId, week, season])
  @@map("matchup_analytics")
}

model WaiverWireAnalytics {
  id                    String    @id @default(cuid())
  playerId              String
  week                  Int
  season                Int       @default(2025)
  addPercentage         Float     @default(0)
  dropPercentage        Float     @default(0)
  faabSpent             Int       @default(0) // Average FAAB spent
  emergingPlayer        Boolean   @default(false)
  breakoutCandidate     Boolean   @default(false)
  sleeper               Boolean   @default(false)
  injuryReplacement     Boolean   @default(false)
  streamingOption       Boolean   @default(false)
  priorityLevel         Int       @default(0) // 1-5 priority ranking
  reasonsToAdd          String    // JSON array of reasons
  expectedOwnership     Float     @default(0)
  upcomingSchedule      String    // JSON schedule difficulty
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, week, season])
  @@map("waiver_wire_analytics")
}

model TradeAnalytics {
  id                   String  @id @default(cuid())
  tradeId              String
  team1Id              String
  team2Id              String
  team1ValueGiven      Float   @default(0)
  team1ValueReceived   Float   @default(0)
  team2ValueGiven      Float   @default(0)
  team2ValueReceived   Float   @default(0)
  team1NetValue        Float   @default(0)
  team2NetValue        Float   @default(0)
  fairnessScore        Float   @default(0) // -1 to 1, 0 is fair
  riskAssessment       Float   @default(0)
  seasonImpact         Float   @default(0)
  positionStrength     String  // JSON position impacts
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tradeId])
  @@map("trade_analytics")
}

model LeagueAnalytics {
  id                  String  @id @default(cuid())
  leagueId            String
  week                Int
  season              Int     @default(2025)
  averageScore        Float   @default(0)
  highScore           Float   @default(0)
  lowScore            Float   @default(0)
  scoringVariance     Float   @default(0)
  competitiveBalance  Float   @default(0) // 0-1 how close teams are
  parity              Float   @default(0) // Week-to-week variance
  playoffRace         String  // JSON playoff probabilities
  strengthOfSchedule  String  // JSON SOS by team
  powerRankings       String  // JSON power rankings
  trendsAnalysis      String  // JSON trend data
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@unique([leagueId, week, season])
  @@map("league_analytics")
}

model PlayerConsistency {
  id                String  @id @default(cuid())
  playerId          String
  season            Int     @default(2025)
  weekCount         Int     @default(0)
  totalPoints       Float   @default(0)
  averagePoints     Float   @default(0)
  standardDeviation Float   @default(0)
  coefficient       Float   @default(0) // Consistency coefficient
  floorScore        Float   @default(0) // 10th percentile
  ceilingScore      Float   @default(0) // 90th percentile
  busts             Int     @default(0) // Games < 50% projection
  booms             Int     @default(0) // Games > 150% projection
  reliability       Float   @default(0) // Games meeting projection %
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, season])
  @@map("player_consistency")
}

model StrengthOfSchedule {
  id              String  @id @default(cuid())
  teamId          String
  week            Int
  season          Int     @default(2025)
  remainingSOS    Float   @default(0) // Remaining schedule difficulty
  playedSOS       Float   @default(0) // Played schedule difficulty
  positionSOS     String  // JSON position-specific SOS
  fantasyPlayoffs Float   @default(0) // Weeks 15-17 SOS
  easyMatchups    Int     @default(0)
  hardMatchups    Int     @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, week, season])
  @@map("strength_of_schedule")
}

model RealTimeEvents {
  id            String   @id @default(cuid())
  eventType     String   // SCORE_UPDATE, INJURY, TRADE, WAIVER_CLAIM
  entityType    String   // PLAYER, TEAM, MATCHUP
  entityId      String
  data          String   // JSON event data
  impact        Float    @default(0) // Fantasy impact score
  confidence    Float    @default(1.0)
  processed     Boolean  @default(false)
  
  createdAt DateTime @default(now())

  @@index([eventType, createdAt])
  @@map("real_time_events")
}