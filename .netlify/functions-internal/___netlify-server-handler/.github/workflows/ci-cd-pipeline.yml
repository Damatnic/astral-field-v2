name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: 8

jobs:
  # Job 1: Code Quality Checks
  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 📂 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: 🔄 Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: 🔍 Run ESLint
        run: pnpm run lint
        continue-on-error: true
        
      - name: 🔍 Run TypeScript Check
        run: pnpm run type-check
        
      - name: 🎨 Check Formatting
        run: pnpm run format:check
        
      - name: 📊 Generate Quality Report
        if: always()
        run: |
          echo "## Code Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "- ESLint: ${{ steps.eslint.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- TypeScript: ${{ steps.typescript.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- Formatting: ${{ steps.formatting.outcome }}" >> $GITHUB_STEP_SUMMARY

  # Job 2: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔐 Run Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
      - name: 🔍 Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
        
      - name: 🔍 Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'fantasy-football'
          path: '.'
          format: 'HTML'
        continue-on-error: true
        
      - name: 📤 Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            dependency-check-report.html
            snyk-report.json

  # Job 3: Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality-checks
    
    strategy:
      matrix:
        test-suite: [unit, integration, e2e]
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: fantasy_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🗄️ Setup Database
        run: |
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/fantasy_test
          
      - name: 🧪 Run ${{ matrix.test-suite }} tests
        run: |
          case "${{ matrix.test-suite }}" in
            unit)
              npm run test:unit -- --coverage
              ;;
            integration)
              npm run test:integration
              ;;
            e2e)
              npx playwright install --with-deps
              npm run test:e2e
              ;;
          esac
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/fantasy_test
          REDIS_URL: redis://localhost:6379
          
      - name: 📊 Upload Coverage
        if: matrix.test-suite == 'unit'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          
      - name: 📤 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            coverage/
            test-results/
            playwright-report/

  # Job 4: Build
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality-checks, test]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          
      - name: 📏 Check bundle size
        run: |
          npm run analyze:bundle
          echo "## Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          echo "Total Size: $(du -sh .next | cut -f1)" >> $GITHUB_STEP_SUMMARY
          
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            .next/
            public/
            package.json
            package-lock.json

  # Job 5: Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 🚀 Start application
        run: |
          npm start &
          npx wait-on http://localhost:3000
        env:
          NODE_ENV: production
          
      - name: 🏎️ Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/login
            http://localhost:3000/dashboard
          uploadArtifacts: true
          temporaryPublicStorage: true
          
      - name: 📊 Performance Report
        if: always()
        run: |
          echo "## Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- Lighthouse Performance: ${{ steps.lighthouse.outputs.performance }}" >> $GITHUB_STEP_SUMMARY
          echo "- Lighthouse Accessibility: ${{ steps.lighthouse.outputs.accessibility }}" >> $GITHUB_STEP_SUMMARY
          echo "- Lighthouse Best Practices: ${{ steps.lighthouse.outputs.best-practices }}" >> $GITHUB_STEP_SUMMARY
          echo "- Lighthouse SEO: ${{ steps.lighthouse.outputs.seo }}" >> $GITHUB_STEP_SUMMARY

  # Job 6: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security, performance]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.fantasy-football.app
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          
      - name: 🚀 Deploy to Vercel Staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --env=preview'
          
      - name: 🔍 Run Smoke Tests
        run: |
          npm run test:smoke
        env:
          BASE_URL: https://staging.fantasy-football.app
          
      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Deployed to staging: https://staging.fantasy-football.app'
            })

  # Job 7: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security, performance]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: production
      url: https://fantasy-football.app
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          
      - name: 🗄️ Run Database Migrations
        run: |
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          
      - name: 🚀 Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          
      - name: 🔍 Run Smoke Tests
        run: |
          npm run test:smoke
        env:
          BASE_URL: https://fantasy-football.app
          
      - name: 📊 Monitor Deployment
        run: |
          npm run monitor:deployment
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
          
      - name: 🔔 Send Notifications
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: 🏷️ Create Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes in this Release
            - Automated deployment from commit ${{ github.sha }}
            - View changes: ${{ github.event.compare }}
          draft: false
          prerelease: false

  # Job 8: Rollback (Manual Trigger)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: production
      
    steps:
      - name: 🔄 Rollback Vercel Deployment
        run: |
          vercel rollback --token=${{ secrets.VERCEL_TOKEN }}
          
      - name: 🗄️ Rollback Database
        run: |
          npm run db:rollback
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          
      - name: 🔔 Send Rollback Notification
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          text: '⚠️ Production rollback initiated by ${{ github.actor }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}